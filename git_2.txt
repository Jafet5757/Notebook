-----------------------------------------TAMAÑO-PANTALLA--------------------------------------------
git help <comando>
esc // para ir atras
a // editar
: // para comenzar a escribir
q // es para salir del modo lectura
wq! // para salir y escribir

----------------configuraciones globales-------------------
git config --global user.email "email" // para agregar mi email ; podemos poner username
git config --global -e // nos muestra nuestros datos
git config --global init.defaultBranch <name> // cambia el nombre de la rama para todos

--------------Inicio de proyecto---------------------
git init // inicializa un repositorio
git status // status del proyecto
git status --short // nos muestra un resumen

-----------------Stage-----------------------------------------
git add . // prepara todos los archivos
git reset <nombre del archivo> // quita ese archido del add
git add <directory>/*.html // agrega todos los html
git add */*.html // de todos los directorios todos los html
/**
* Si se crea un .gitkeep dentro de una carpeta vacía esta es tomada
* en cuenta por git add, de otro caso no
*/
git diff <archivo> // nos muestra los cambios antes de subirlos al staged
git diff --staged // nos muestra los cambios en el staged

------------------Commits---------------------
git commit -m "repwitory name"// agrega nombre al repositorio
git commit -am "repository name" // añade y hace commit en un paso *Solo con archivos ya agregados*
git commit --amend -m "new repository name" // cambia el nombre del ultimo repo
git commit --amend // entra al archivo de edicion
git commit -am "Fixes #<numero>: <texto>" // hace referencia a el issue 5

git reset --soft HEAD^<numero de commits antes> // elimina un commit antes del head *deja cambios*
git reset --mixed <hash_nombre_HEAD^> // elimina commit hechos despues de este pero *deja cambios*
git reset --hard <hash_nombre_HEAD^> // elimina cambios y commits despues de este *no deja cambios*
/*
* Si queremos regresar despues de un reset hard debemos
* Buscar su hash en "git reflog"
* git reset --hard <hash> 
*/

git mv <ruta archivo> <nueva ruta> /* mueve un archivo de ruta o lo renmbra en la misma ruta y sube 		lo staged*/
git rm <ruta archivo> // Elimina un archivo

git reflog // logs de actividades hechas
git log // nos muestra los commits
git log --oneline // resumen de log
git checkout -- . // reconstruye el proyecto al ultimo commit
git checkout -- <archivo> // reconstruye solo un archivo al commit anterior
git checkout <hash> <archivo> // reconstruye un archivo de un commit cualquiera

------------------Ramas------------------------------------
git branch // nos dice en que rama estamos
git branch -m <nombreRama> <nuevoNombreRama> // para cambiar el nombre a una rama en este proyecto
	git branch -m master main
git branch <nuevaRama> // para crear una rama
git checkout <rama> // para moverte a una rama
git checkou -b <nuevaRama> //crea una rama y noes mueve a ella
git merge <rama> // union de ramas debes estar en la rama donde llegan los cambios
git branch -a // --all noes muestra ramas ocultas o no usadas

git branch -d <rama> // borra una rama
git branch -d <rama> -f // borra una rama de forma forzada cuando tiene cambios

git remote prune origin // actualiza las referencias de las ramas del remoto

------------------Alias------------------------------
git config --global alias.<nuevoAlias> <comandoAremplazar>
	git config --global alias.s "status --short"
git config --global -e // entramos a la configuracion global para editar un alias

/* El siguiente es un alias recomendado que muestra logs*/
git config --global alias.lg "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

------------------------Tags------------------------------
git tag // nos muestra los tags
git tag <nombre> // agregamos un tag al commit
git tag -d <nombre> // elimina un tag
git show <tag> // nos muestra informacion de un tag especifico
git tag -a <version> -m "message" // agrega una version al commit
git tag -a <version> <hash> -m "message" // agrega version a un commit en el tiempo
git push --tags // para subir los tags a github
git ckeckout <v1.0.1> // para mover el head a un tag

----------------------Stash--------------------------------
git stash // Guarda todos los cambios que no estén em el stage y lo quita del trabajo actual
git stash save "message" // guarda un stash con un mensaje
git stash list // nos enlista los stash
git stash pop // combina el head con el stash y lo elimina
git stash clear // borra todos los stash
git stash apply <stash@{2}> // combina un stash especifico pero no lo elimina
git stash drop <stash@{2}> // elimina un stash especifico
git stash show <stash@{2}> // nos muestra los cambios hechos en un stash
git stash list --stat // nos muestra los cambios de todos los stash

-------------------------rebase-----------------------
//un Rebase normal actualiza el punto de origen de la rama
git rebase <rama> // arrebasamos la rama que mencionamos

git rebase -i HEAD~4 // hace un rebase interactivo de los ultimos 4 commits
/*
* en el documento Squash combina dos commits
* Reward edita el nombre del commit pero no se hace ahí mismo, hay que salir del primer doc
*/

______________________Versionamiento semantico__________
Breaking.Feature.Fix
Major.Minor.Patch
1.7.3
1.7.3-Beta.1 // tag


---------------------GutHub-------------------------------------
git remote add <url> // agrega un repositorio
git push --tags // sube los tags del repo local
git pull // baja y combinas los cambios desde github a gut local
git pull --all // baja todos los cambios, incluso referencias a nuevas ramas

git fetch origin // baja los cambios en el origin
git merge origin/master // combina el origin con el master
git push origin master // sube los cambios del master al origin

git config --global pull.ff only // configura el pull global para que siempre haga un fast forward